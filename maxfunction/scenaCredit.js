const {
	Scenes,Markup
}  = require('telegraf');

const scenesCredit = new Scenes.BaseScene('scenesCredit');

const startKeyboard = Markup.keyboard([
					[Markup.button.text('üá∑üá∫–†—É–±–ª—å –∫—É—Ä—Å–∏'),Markup.button.text('üõÉ–ë–æ–∑–æ—Ä –∫—É—Ä—Å–∏ (–ù–æ—Ä–∞—Å–º–∏–π)')],
					[Markup.button.text('üèõ–ú–∞—Ä–∫–∞–∑–∏–π –ë–∞–Ω–∫'),Markup.button.text('üìâ–í–∞–ª—é—Ç–∞ –±–∏—Ä–∂–∞—Å–∏'),Markup.button.text('üè¶–ë–∞–Ω–∫–ª–∞—Ä –∫—É—Ä—Å–∏')],
					[Markup.button.text('üìü–æ–º–æ–Ω–∞—Ç –≤–∞ –∫–∏—Ä–∏–¥–∏—Ç –∫–∞–ª–∫—É–ª—è—Ç—Ä–ª–∞—Ä–∏')]
					]).resize()
let demo = null;
let shap = '';
function amort(balance, interestRate, terms)
{
  var monthlyRate = interestRate/12;
  //Calculate the payment
    var payment = balance * (monthlyRate/(1-Math.pow(1+monthlyRate, -terms)));
  	let shap =
	`                               –ö—Ä–∏–¥–∏—Ç  –∂–∞–¥–≤–∞–ª–∏\n`+
	`|-–æ–π-|--–∞—Å–æ—Å–∏–π--|---“õ–∏–∑–∏“õ–∏—à---|---“ö–æ–ª–¥–∏“õ---|\n`
  for (var count = 0; count < terms; ++count)
  { 
    var interest = 0;
    var monthlyPrincipal = 0;
    let oy =  count + 1;
    let balans = balance.toFixed(2);
    
    interest = balance * monthlyRate;
    let qiziqish = interest.toFixed(2);
    
    monthlyPrincipal = payment - interest;
    let asosiy = monthlyPrincipal.toFixed(2);

    shap += `|  <code>${oy}</code>  |<code>${asosiy}</code>|<code>${qiziqish}</code>|<code>${balans}</code>|\n`
    balance = balance - monthlyPrincipal;   
  }
  
  return shap;
}
function get(leter){
	let shap = `<b>       –ö—Ä–∏–¥–∏—Ç –∫–∞–ª–∫—É–ª—è—Ç—Ä–∏!     </b>\n\n`+
	`–º–∏“õ–¥–æ—Ä–∏:  <code> ${leter?leter[0]:'0'} so\'m </code>\n`+
	`—Ñ–æ–∏–∑–∏:    <code>   ${leter[1]?leter[1]:'8'} %</code>\n`+
	`–º—É—Ç–¥–∞—Ç–∏:  <code>  ${leter[2]?leter[2]:'5'} –æ–π</code>`;
	console.log(shap)
	return shap;
}
const kalkey = [[Markup.button.callback('‚ûï—Ñ–æ–∏–∑','+f'),Markup.button.callback('‚ûñ—Ñ–æ–∏–∑','-f')],
				[Markup.button.callback('‚ûï–º—É—Ç–¥–∞—Ç','+m'),Markup.button.callback('‚ûñ–º—É—Ç–¥–∞—Ç','-m')],
				[Markup.button.callback('üîÜ“≥–∏—Å–æ–±–ª–∞—à','=')]]

scenesCredit.enter(async(ctx) =>{
	ctx.session.data_deposit = Array(0,8,5);
	ctx.reply('–ö—Ä–∏–¥–∏—Ç —Å—É–º–º–∞—Å–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ :',Markup.keyboard(['‚Ü©Ô∏è–±–µ–∫–æ—Ä “õ–∏–ª–∏—à']).resize())
})

scenesCredit.hears('‚Ü©Ô∏è–±–µ–∫–æ—Ä “õ–∏–ª–∏—à',ctx=>{
	ctx.reply('–ë–æ—à —Å–∞“≥–∏—Ñ–∞',{parse_mode:"HTML",...startKeyboard})
	ctx.scene.leave();
})

scenesCredit.on('text',ctx=>{
	//
	if(isNaN(ctx.message.text)){
		ctx.reply('—é–±–æ—Ä–≥–∞–Ω “õ–∏–π–º–∞—Ç–∏–∑ —Å–æ–Ω –µ–º–∞—Å!');
	}else{
		ctx.session.data_deposit[0] = ctx.message.text;
		ctx.reply(get(ctx.session.data_deposit),{
			parse_mode:'HTML',
			...Markup.inlineKeyboard(kalkey)
		})
	}
})
scenesCredit.action(['+f','-f','+m','-m','='],ctx=>{
	if(ctx.match[0] == '+f')
		ctx.session.data_deposit[1]++;
	if(ctx.match[0] == '-f')
		ctx.session.data_deposit[1]--;
	if(ctx.match[0] == '+m')
		ctx.session.data_deposit[2]++;
	if(ctx.match[0] == '-m')
		ctx.session.data_deposit[2]--;;
	if (ctx.match[0] == '=') {
		ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id);
	demo = ctx.session.data_deposit;
		ctx.reply(get(demo)+'\n'+amort(parseInt(demo[0]),parseInt(demo[1]),parseInt(demo[2])),{
			parse_mode:'HTML',...startKeyboard})
		ctx.scene.leave();
	}else{
	ctx.telegram.editMessageText(ctx.chat.id,ctx.update.callback_query.message.message_id, undefined, get(ctx.session.data_deposit),
      	{
			parse_mode:'HTML',
			...Markup.inlineKeyboard(kalkey)
		})	
	}
})

module.exports = scenesCredit;







