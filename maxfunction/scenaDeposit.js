const {
	Scenes,Markup
}  = require('telegraf');
function formatDate(n,flag) {
    var d = new Date(),
        month = '' + (d.getMonth() + n),
        day = '' + d.getDate(),
        year = d.getFullYear(),
        hour = '' + d.getHours(),
        minutes = '' +  d.getMinutes();

    if (month.length < 2) 
        month = '0' + month;
    if (day.length < 2) 
        day = '0' + day;
    if (hour.length < 2) 
        hour = '0' + hour;
    if (minutes.length < 2) 
        minutes = '0' + minutes;
    if (flag)
        return [hour, minutes].join(':');

    return [year, month, day].join('-');
}
const startKeyboard = Markup.keyboard([
					[Markup.button.text('üá∑üá∫–†—É–±–ª—å –∫—É—Ä—Å–∏'),Markup.button.text('üõÉ–ë–æ–∑–æ—Ä –∫—É—Ä—Å–∏ (–ù–æ—Ä–∞—Å–º–∏–π)')],
					[Markup.button.text('üèõ–ú–∞—Ä–∫–∞–∑–∏–π –ë–∞–Ω–∫'),Markup.button.text('üìâ–í–∞–ª—é—Ç–∞ –±–∏—Ä–∂–∞—Å–∏'),Markup.button.text('üè¶–ë–∞–Ω–∫–ª–∞—Ä –∫—É—Ä—Å–∏')],
					[Markup.button.text('üìü–æ–º–æ–Ω–∞—Ç –≤–∞ –∫–∏—Ä–∏–¥–∏—Ç –∫–∞–ª–∫—É–ª—è—Ç—Ä–ª–∞—Ä–∏')]
					]).resize()

const scenesDeposit = new Scenes.BaseScene('scenesDeposit');
let shap = '';
function get(leter){
	let shap = `<b>       –î–µ–ø–æ–∑–∏—Ç –∫–∞–ª–∫—É–ª—è—Ç—Ä–∏!     </b>\n\n`+
	`–º–∏“õ–¥–æ—Ä–∏:  <code> ${leter?leter[0]:'0'} so\'m </code>\n`+
	`—Ñ–æ–∏–∑–∏:    <code>   ${leter[1]?leter[1]:'8'} %</code>\n`+
	`–º—É—Ç–¥–∞—Ç–∏:  <code>  ${leter[2]?leter[2]:'5'} –æ–π</code>`;
	console.log(shap)
	return shap;
}
function getOmont(arr){
	let plus = (arr[0]*arr[1])/12*arr[2]/100;
	let len = 5 + 12 + plus.toFixed(2).toString().length + arr[0].toString().length;
	let shap =
	`                               –î–µ–ø–æ–∑–∏—Ç  –∂–∞–¥–≤–∞–ª–∏\n`+
	`|-#-|----–°–∞–Ω–∞----|---–§–æ–∏–∑ —Ç—û–ª–æ–≤–ª–∞—Ä–∏---|---“ö–æ–ª–¥–∏“õ----|\n`
	for (var i = 1;  i<=arr[2]; i++) {
		shap += `| <code>${i}</code> |<code> ${formatDate(i)} </code>|<code>   ${plus.toFixed(2)}   </code>|<code>  ${arr[0]}  </code>|\n`
	}
	console.log(shap)
	return shap;
}
const kalkey = [[Markup.button.callback('‚ûï—Ñ–æ–∏–∑','+f'),Markup.button.callback('‚ûñ—Ñ–æ–∏–∑','-f')],
				[Markup.button.callback('‚ûï–º—É—Ç–¥–∞—Ç','+m'),Markup.button.callback('‚ûñ–º—É—Ç–¥–∞—Ç','-m')],
				[Markup.button.callback('üîÜ“≥–∏—Å–æ–±–ª–∞—à','=')]]

//Markup.inlineKeyboard(
scenesDeposit.enter(async(ctx) =>{
	ctx.session.data_deposit = Array(0,8,5);
	ctx.reply('–î–µ–ø–æ—Å–∏—Ç —Å—É–º–º–∞—Å–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ :',Markup.keyboard(['‚Ü©Ô∏è–±–µ–∫–æ—Ä “õ–∏–ª–∏—à']).resize())
})
scenesDeposit.hears('‚Ü©Ô∏è–±–µ–∫–æ—Ä “õ–∏–ª–∏—à',ctx=>{
	ctx.reply('–ë–æ—à —Å–∞“≥–∏—Ñ–∞',{parse_mode:"HTML",...startKeyboard})
	ctx.scene.leave();
})
scenesDeposit.on('text',ctx=>{
	//
	if(isNaN(ctx.message.text)){
		ctx.reply('—é–±–æ—Ä–≥–∞–Ω “õ–∏–π–º–∞—Ç–∏–∑ —Å–æ–Ω –µ–º–∞—Å!');
	}else{
		ctx.session.data_deposit[0] = ctx.message.text;
		ctx.reply(get(ctx.session.data_deposit),{
			parse_mode:'HTML',
			...Markup.inlineKeyboard(kalkey)
		})
	}
})
scenesDeposit.action(['+f','-f','+m','-m','='],ctx=>{
	if(ctx.match[0] == '+f')
		ctx.session.data_deposit[1]++;
	if(ctx.match[0] == '-f')
		ctx.session.data_deposit[1]--;
	if(ctx.match[0] == '+m')
		ctx.session.data_deposit[2]++;
	if(ctx.match[0] == '-m')
		ctx.session.data_deposit[2]--;;
	if (ctx.match[0] == '=') {
		ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id);
		ctx.reply(get(ctx.session.data_deposit)+'\n'+getOmont(ctx.session.data_deposit),{
			parse_mode:'HTML',...startKeyboard})
		ctx.scene.leave();
	}else{
	ctx.telegram.editMessageText(ctx.chat.id,ctx.update.callback_query.message.message_id, undefined, get(ctx.session.data_deposit),
      	{
			parse_mode:'HTML',
			...Markup.inlineKeyboard(kalkey)
		})	
	}
})
//
module.exports = scenesDeposit;


